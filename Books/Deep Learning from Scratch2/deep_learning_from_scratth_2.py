# -*- coding: utf-8 -*-
"""Deep Learning from Scratth 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1usLoJaV1qBZk7XDuH3Unhjn0Bdmipctp
"""

from google.colab import drive
drive.mount('/content/drive')

!pwd

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/Colab Notebooks/deep-learning-from-scratch-2-master

!pwd

from common import layers

from ch01 import forward_net

abc = forward_net.TwoLayerNet(2, 4, 3)

abc.params

"""p.25"""

import numpy as np

x = np.array([1,2,3m])

x.__class__

x.shape

x.ndim

W = np.array([[1,2,3],[4,5,6]])

W.shape

W.ndim

"""p.26"""

W = np.array([[1,2,3],[4,5,6]])
X = np.array([[0,1,2,],[3,4,5]])

W + X

W * X

A = np.array([[1,2],[3,4]])

A * 10

A = np.array([[1,2],[3,4]])
b = np.array([10,20])

A * b

"""p.28

"""

a = np.array([1,2,3])
b = np.array([4,5,6])

np.dot(a,b)

A = np.array([[1,2],[3,4]])
B = np.array([[5,6],[7,8]])
print(A,'\n',B)

np.matmul(A,B)

"""p.33"""

#3층으로 이루어진 신경망
#입력층 2개의 노드,중간층 4개의 히든노드
W1 = np.random.randn(2,4)
b1 = np.random.randn(4)
x = np.random.randn(10,2)
h = np.matmul(x, W1) + b1

print('W1 : ',W1)
print('b1 : ',b1)
print('x : ',x)
print('h : ',h)

def sigmoid(x):
  return 1 / (1+np.exp(-x))

a = sigmoid(h)
print(a)

#total NN

def sigmoid(x):
  return 1 / (1+np.exp(-x))

W1 = np.random.randn(2,4)
b1 = np.random.randn(4)
W2 = np.random.randn(4,3)
b2 = np.random.randn(3)
x = np.random.randn(10,2)
h = np.matmul(x, W1) + b1
a = sigmoid(h)
s = np.matmul(a, W2) + b2

s

"""p.36"""

# coding: utf-8
import numpy as np

class Sigmoid:
  def __init__(self):
    self.params =[]

  def forward(self, x):
    return 1 / (1 + np.exp(-x))

class Affine:
  def __init__(self, W, b):
    self.params = [W, b]

  def forward(self, x):
    W, b = self.params
    out = np.matmul(x, W) + b
    return out

class TwoLayerNet:
  def __init__(self, input_size, hidden_size, output_size):
    I, H, O = input_size, hidden_size, output_size

    W1 = np.random.randn(I, H)
    b1 = np.random.randn(H)
    W2 = np.random.randn(H, O)
    b2 = np.random.randn(O)

    self.layers = [
                   Affine(W1, b1),
                   Sigmoid(),
                   Affine(W2, b2)
    ]
    
    self.params = []
    for layer in self.layers:
      self.params += layer.params

  def predict(self, x):
    for layer in self.layers:
      x = layer.forward(x)
    return x

x = np.random.randn(10, 2)
model = TwoLayerNet(2, 4, 3)
s = model.predict(x)

print(s)

"""p.49"""

import numpy as np
D, N = 8, 7
x = np.random.randn(1, D)
y = np.repeat(x, N, axis=0)
dy = np.random.randn(N, D)
dx = np.sum(dy, axis=0, keepdims=True)

"""p.51"""

import numpy as np
D, N = 8, 7
x = np.random.randn(N, D)
y = np.sum(x, axis=0, keepdims=True)

dy = np.random.randn(1, D)
dx = np.repeat(dy, N, axis=0)

"""p.54

"""

class Matmul:
  def __init__(self,W):
    self.params = [W]
    self.grads = [np.zeros_like(W)]
    self.x = None
  
  def forward(self, x):
    W, = self.params
    out = np.matmul(x, W)
    self.x = x
    return out

  def backward(self, dout):
    W, = self.params
    dx = np.matmul(dout, W.T)
    dw = np.matmul(self.x.T, dout)
    self.grads[0][...] = dw
    return dx

a = np.array([1, 2, 3])
b = np.array([4, 5, 6])

a = b
a[...] = b

"""p.57"""

class Sigmoid:
  def __init__(self):
    self.params, self.grads = [], []
    self.out = None
  
  def forward(self, x):
    out = 1 / (1+ np.exp(-x))
    self.out = out
    return out

  def backward(self, dout):
    dx = dout * (1.0 - self.out) * self.out
    return dx

"""p.58"""

class Affine:
  def __init__(self, W, b):
    self.params = [W, b]
    self.grads = [np.zeros_like(W), np.zeros_like(b)]
    self.x = None

  def forward(self, x):
    W, b = self.params
    out = np.matmul(x, W) + b
    self.x = x
    return out

  def backward(self, dout):
    W, b = self.params
    dx = np.matmul(dout, W.T)
    dW = np.matmul(self.x.T, dout)
    db = np.sum(dout, axis=0)

    self.grads[0][...] = dW
    self.grads[1][...] = db
    return dx

"""p.61"""

class SGD:
  def __init__(self, lr=0.01):
    self.lr = lr

  def update(self, params, grads):
    for i in range(len(params)):
      params[i] -= self.lr*grads[i]

"""p.62"""

import sys
sys.path.append('..')
from dataset import spiral
import matplotlib.pyplot as plt

x, t = spiral.load_data()
print('x', x.shape)
print('t', t.shape)

"""p.64

"""

import sys
sys.path.append('..')
import numpy as np
from common.layers import Affine, Sigmoid, SoftmaxWithLoss

class TwoLayerNet:
  def __init__(self, input_size, hidden_size, output_size):
    I, H, O = input_size, hidden_size, output_size

    #가중치와 편향 초기화
    W1 = 0.01*np.random.randn(I, H)
    b1 = np.zeros(H)
    W2 = 0.01*np.random.randn(H, O)
    b2 = np.zeros(0)

    #계층 생성
    self.layers=[
                 Affine(W1, b1),
                 Sigmoid(),
                 Affine(W2, b2)
    ]

    self.loss_layer = SoftmaxWithLoss()

    #모든 가중치와 기울기를 리스트에 모은다.
    self.params, self.grads = [], []
    for layer in self.layers:
      self.params += layer.params
      self.grads += layer.grads

    def predict(self, x):
      for layer in self.layers:
        x = layer.forward(x)
      return x

    def forward(self, x, t):
      score = self.predict(x)
      loss = self.loss_layer.forward(score, t)
      return loss
     
    def backward(sefl, dout=1):
      dout = self.loss_layer.backward(dout)
      for layer in reversed(self.layers):
        dout = layer.backward(dout)
      return dout

"""p.66"""

# Commented out IPython magic to ensure Python compatibility.
import sys
sys.path.append('..')
import numpy as np
from common.optimizer import SGD
from dataset import spiral
import matplotlib.pyplot as plt
from ch01.two_layer_net import TwoLayerNet

#하이퍼파라미터 설정
max_epoch = 300
batch_size = 30
hidden_size = 10
learning_rate = 1.0

#데이터 읽기, 모델과 옵티마이저 생성
x, t = spiral.load_data()
model = TwoLayerNet(input_size=2, hidden_size=hidden_size, output_size=3)
optimizer = SGD(lr=learning_rate)

#학습에 사용하는 변수
data_size = len(x)
max_iters = data_size//batch_size
total_loss = 0
loss_count = 0
loss_list = []

for epoch in range(max_epoch):
  #데이터 뒤섞기
  idx = np.random.permutation(data_size)
  x = x[idx]
  t = t[idx]
  #기울기를 구해 매개변수 갱신
  for iters in range(max_iters):
    batch_x = x[iters*batch_size:(iters+1)*batch_size]
    batch_t = t[iters*batch_size:(iters+1)*batch_size]

    loss = model.forward(batch_x, batch_t)
    model.backward()
    optimizer.update(model.params, model.grads)

    total_loss += loss
    loss_count += 1

    if (iters+1) % 10 == 0:
      avg_loss = total_loss / loss_count
      print('| 에폭 %d | 반복 %d / %d | 손실 %.2f'
#         % (epoch+1, iters+1, max_iters, avg_loss))
      loss_list.append(avg_loss)
      total_loss, loss_count = 0,0

import numpy as np
np.random.permutation(10)

"""p.70

"""

import sys
sys.path.append('..')
from common.optimizer import SGD
from common.trainer import Trainer
from dataset import spiral
from ch01.two_layer_net import TwoLayerNet

max_epoch = 300
batch_size = 30
hidden_size = 10
learning_rate = 1.0

x, t = spiral.load_data()
model = TwoLayerNet(input_size=2, hidden_size=hidden_size, output_size=3)
optimizer = SGD(lr = learning_rate)

trainer = Trainer(model, optimizer)
trainer.fit(x, t, max_epoch, batch_size, eval_interval=10)
trainer.plot()

"""p.71

"""

import numpy as np
a = np.random.randn(3)
a.dtype

b = np.random.rand(3).astype(np.float32)
b.dtype

c = np.random.randn(3).astype('f')
c.dtype

"""p.73"""

import cupy as cp
x = cp.arange(6).reshape(2,3).astype('f')
x

x.sum(axis=1)

"""p.82"""

text = 'You say goodbye and I say hello.'

text = text.lower()
text = text.replace('.',' .')
text

words = text.split(' ')
words

word_to_id = {}
id_to_word = {}

for word in words:
  if word not in word_to_id:
    new_id = len(word_to_id)
    word_to_id[word] = new_id
    id_to_word[new_id] = word

word_to_id

id_to_word

id_to_word[1]

word_to_id['hello']

import numpy as np
corpus = [word_to_id[w] for w in words]
corpus = np.array(corpus)
corpus

"""p.85"""

import numpy as np

def preprocess(text):
  text = text.lower()
  text = text.replace('.', ' .')
  words = text.split(' ')
  word_to_id = {}
  id_to_word = {}
  for word in words:
    if word not in word_to_id:
      new_id = len(word_to_id)
      word_to_id[word] = new_id
      id_to_word[new_id] = word

  corpus = np.array([word_to_id[w] for w in words])

  return corpus, word_to_id, id_to_word

text = 'You say goodbye and I say hello'
corpus, word_to_id, id_to_word = preprocess(text)